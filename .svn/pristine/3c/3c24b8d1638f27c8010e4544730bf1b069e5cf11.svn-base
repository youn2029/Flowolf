package kr.or.dev.timeline.vote_item.dao;

import static org.junit.Assert.*;

import java.util.List;

import javax.annotation.Resource;

import kr.or.dev.timeline.vote_item.model.VoteItemVO;

import org.apache.commons.dbcp2.BasicDataSource;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.core.io.ClassPathResource;
import org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;
import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"classpath:kr/or/dev/config/spring/root-context.xml",
								 "classpath:kr/or/dev/config/spring/datasource_test.xml",
								 "classpath:kr/or/dev/config/spring/transaction.xml"})
public class VoteItemDaoTest {
	
	@Resource(name="viDao")
	private VoteItemDaoInf viDao;
	
	@Before
	public void setUp(){
		// populator : 스프링에서 제공
		// datasource(db 연결정보), 초기화 스크립트
		
		// datasource
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@112.220.114.130:1521:xe");
		dataSource.setUsername("flowolftest");
		dataSource.setPassword("flowolftest");
		
		// 초기화 스크립트(init.sql)
		
		// poplucator 생성
		ResourceDatabasePopulator populator = new ResourceDatabasePopulator();
		populator.addScript(new ClassPathResource("kr/or/dev/config/db/init.sql"));
		
		DatabasePopulatorUtils.execute(populator, dataSource);
	}

	/**
	* Method : viDaoTest
	* 최초작성일 : 2018. 9. 20.
	* 작성자 : 윤성호
	* 변경이력 :
	* Method 설명 : viDaoTest
	*/
	@Test
	public void viDaoTest() {
		assertNotNull(viDao);
	}
	
	/**
	* Method : insertViTest
	* 최초작성일 : 2018. 9. 20.
	* 작성자 : 윤성호
	* 변경이력 :
	* Method 설명 : 투표 항목 등록 Test
	*/
	@Test
	public void insertViTest(){
		/***Given***/
		VoteItemVO viVo = new VoteItemVO();
		viVo.setVi_cont("insert test");
		viVo.setVote_no(10000);

		/***When***/
		int resultCnt = viDao.insertVi(viVo);

		/***Then***/
		assertEquals(1, resultCnt);
	}
	
	/**
	* Method : updateViTest
	* 최초작성일 : 2018. 9. 20.
	* 작성자 : 윤성호
	* 변경이력 :
	* Method 설명 : 투표 항목 수정 Test
	*/
	@Test
	public void updateViTest(){
		/***Given***/
		VoteItemVO viVo = new VoteItemVO();
		viVo.setVi_cont("update vote_item test");
		viVo.setVi_no(10000);

		/***When***/
		int resultCnt = viDao.updateVi(viVo);

		/***Then***/
		assertEquals(1, resultCnt);
	}
	
	/**
	* Method : deleteVi
	* 최초작성일 : 2018. 9. 20.
	* 작성자 : 윤성호
	* 변경이력 :
	* Method 설명 : 투표 항목 삭제처리 Test
	*/
	@Test
	public void deleteVi(){
		/***Given***/		

		/***When***/
		int resultCnt = viDao.deleteVi(10000);

		/***Then***/
		assertEquals(1, resultCnt);
	}
	
	/**
	* Method : getViListTest
	* 최초작성일 : 2018. 9. 20.
	* 작성자 : 윤성호
	* 변경이력 :
	* Method 설명 : 투표글의 항목 조회
	*/
	@Test
	public void getViListTest(){
		/***Given***/
		
		/***When***/
		List<VoteItemVO> viList = viDao.getViList(10000);

		/***Then***/
		assertEquals(1, viList.size());
	}
}
