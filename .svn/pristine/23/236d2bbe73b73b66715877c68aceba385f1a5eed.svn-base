package kr.or.dev.board.post.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.dao.support.DaoSupport;
import org.springframework.stereotype.Service;

import kr.or.dev.board.post.dao.PostDaoInf;
import kr.or.dev.board.post.model.PostVO;

@Service("postService")
public class PostService implements PostServiceInf {

	@Resource(name="postDao")
	private PostDaoInf postDao;
	
	/**
	 * Method : getPostList
	 * 최초작성일 : 2018. 9. 11.
	 * 작성자 : 노미소
	 * 변경이력 :
	 * @param map
	 * @return
	 * Method 설명 : map을 매개변수로 받아 10개의 목록이 나오는 리스트 반환
	 */
	@Override
	//1페이지 당 10개 게시글
	public Map<String, Object> getPostList(Map<String, Integer> map) {
		
		//Map생성 
		Map<String, Object> resultMap = new HashMap<String, Object> ();
			
		List<PostVO> postList = postDao.getPostList(map); 
		resultMap.put("postList", postList);
		int post_kind = map.get("post_kind");
		
		int totCnt = postDao.getPostTotCnt(post_kind);
		resultMap.put("totCnt", totCnt);
		
		int page = map.get("page");
		int pageSize = map.get("pageSize");
		
		return resultMap;
	}
	
	//페이지 navigation 
	private String makePageNavi(int page, int pageSize, int totCnt, int post_kind){
		int cnt = totCnt / pageSize;
		int mod = totCnt % pageSize;
		
		if (mod > 0) {
			cnt++;
		}
		
		StringBuffer pageNaviStr = new StringBuffer();
		
		//페이지 전/후 넘기기
		int prevPage = page == 1 ? 1 : page-1;
		int nextPage = page == cnt ? page : page+1;
		pageNaviStr.append("<li><a href=\"/post/list?board_no=" +post_kind+ "&page=" + 1 + "&pageSize=" + pageSize + "\" aria-label=\"First\"><span aria-hidden=\"true\">&laquo;</span></a></li>");
		pageNaviStr.append("<li><a href=\"/post/list?board_no=" +post_kind+ "&page=" + prevPage + "&pageSize=" + pageSize + "\" aria-label=\"Previous\"><span aria-hidden=\"true\">&lt;</span></a></li>");
		
		for (int i = 1; i <= cnt; i++) {
			String activeClass = "";
			if (i == page) {
				activeClass = "";
				
			} //if end
			pageNaviStr.append("<li " + activeClass + "><a href=\"/post/list?post_kind=" +post_kind+ "&page=" + i + "&pageSize="+ pageSize + "\">" + i + "</a></li>");
		} //for end
		
		pageNaviStr.append("<li><a href=\"/post/list?post_kind=" +post_kind+ "&page=" + nextPage + "&pageSize=" + pageSize + "\" aria-label=\"Next\"><span aria-hidden=\"true\">&gt;</span></a></li>");
		pageNaviStr.append("<li><a href=\"/post/list?board_no=" +post_kind+ "&page=" + cnt + "&pageSize=" + pageSize + "\" aria-label=\"Last\"><span aria-hidden=\"true\">&raquo;</span></a></li>");
		
		return pageNaviStr.toString();
	}
	
	
	/**
	 * Method : getPostSearchList
	 * 최초작성일 : 2018. 9. 6.
	 * 작성자 : 노미소
	 * 변경이력 :
	 * @param map
	 * @return
	 * Method 설명 : 검색 분류와 검색 내용을 map객체로 받아 검색된 리스트 반환
	 */
	@Override
	public List<PostVO> getPostSearchList(Map<String, String> map) {
		return postDao.getPostSearchList(map);
	}

	/**
	 * Method : getPostDetail
	 * 최초작성일 : 2018. 9. 6.
	 * 작성자 : 노미소
	 * 변경이력 :
	 * @param post_no
	 * @return
	 * Method 설명 : 게시글의 번호를 매개변수로 받아 해당 게시글의 상세정보 반환
	 */
	@Override
	public PostVO getPostDetail(int post_no) {
		return postDao.getPostDetail(post_no); 
	}

	/**
	 * Method : insertPost
	 * 최초작성일 : 2018. 9. 6.
	 * 작성자 : 노미소
	 * 변경이력 :
	 * @param postVo
	 * @return
	 * Method 설명 : 게시글 객체를 매개변수로 받아 게시글 생성
	 */
	@Override
	public int insertPost(PostVO postVo) {
		return postDao.insertPost(postVo); 
	}

	/**
	 * Method : updatePost
	 * 최초작성일 : 2018. 9. 6.
	 * 작성자 : 노미소
	 * 변경이력 :
	 * @param postVo
	 * @return
	 * Method 설명 : 게시글 객체를 매개변수로 받아 게시글 수정
	 */
	@Override
	public int updatePost(PostVO postVo) {
		return postDao.updatePost(postVo); 
	}

	/**
	 * Method : deletePost
	 * 최초작성일 : 2018. 9. 6.
	 * 작성자 : 노미소
	 * 변경이력 :
	 * @param post_no
	 * @return
	 * Method 설명 : 게시글 번호를 매개변수로 받아 게시글 삭제
	 */
	@Override
	public int deletePost(int post_no) {
		return postDao.deletePost(post_no); 
	}

	/**
	 * Method : getPostSeq
	 * 최초작성일 : 2018. 9. 6.
	 * 작성자 : 노미소
	 * 변경이력 :
	 * @return
	 * Method 설명 : 게시글 저장에 사용되는 게시글 번호 반환
	 */
	@Override
	public int getPostSeq() {
		return postDao.getPostSeq(); 
	}


	
}
