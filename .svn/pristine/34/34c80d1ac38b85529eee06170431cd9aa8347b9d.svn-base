package kr.or.dev.talk.chat.web;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.or.dev.group.project_user.model.ProjectUserVO;
import kr.or.dev.group.project_user.service.ProjectUserServiceInf;
import kr.or.dev.talk.chat.model.ChatVO;
import kr.or.dev.talk.chat.service.ChatServiceInf;
import kr.or.dev.talk.chat_con.model.ChatConFileVO;
import kr.or.dev.talk.chat_con.model.ChatConVO;
import kr.or.dev.talk.chat_con.service.ChatConServiceInf;
import kr.or.dev.talk.chat_file.model.ChatFileVO;
import kr.or.dev.talk.chat_file.service.ChatFileServiceInf;
import kr.or.dev.talk.chat_user.model.ChatUserVO;
import kr.or.dev.talk.chat_user.service.ChatUserServiceInf;
import kr.or.dev.user.member.model.MemberVO;
import kr.or.dev.user.member.service.MemberServiceInf;
import kr.or.dev.user.partner.model.PartnerVO;
import kr.or.dev.user.partner.service.PartnerServiceInf;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

@RequestMapping(value="/chat")
@Controller
public class ChatController {
	
	@Resource(name="chatService")
	private ChatServiceInf chatService;
	
	@Resource(name="chatConService")
	private ChatConServiceInf chatConService;
	
	@Resource(name="memService")
	private MemberServiceInf memService;
	
	@Resource(name="ptnService")
	private PartnerServiceInf ptnService;
	
	@Resource(name="proUserService")
	private ProjectUserServiceInf proUserService;
	
	@Resource(name="chatFileService")
	private ChatFileServiceInf chatFileService;
	
	@Resource(name="chatUserService")
	private ChatUserServiceInf chatUserService;
	
	
	// 업로드된 파일이 저장될 위치 입니다.
	private final String PATH = "C:\\Flowolf\\chatfile\\";
	
	// json 데이터로 응답을 보내기 위한 
	@Autowired
	MappingJackson2JsonView jsonView;
		
	@RequestMapping(value="/insertChat")
	public String insertChat(HttpServletRequest req, Model model) throws UnknownHostException{
		model.addAttribute("nick", req.getParameter("nick"));
		model.addAttribute("ip", req.getParameter("ipNum"));
		model.addAttribute("port", req.getParameter("portNum"));
		
		return "chat/chat";
		
	}
	
	// 채팅리스트에서 새로 생성해서 초대하기
	@RequestMapping(value="/createChat")
	public String createChat(Model model, HttpSession session) throws UnknownHostException{
		
		MemberVO memVo = (MemberVO)session.getAttribute("memVo");
		model.addAttribute("memVo", memVo);
		
		model.addAttribute("ip", InetAddress.getLocalHost().getHostAddress());
		
		List<PartnerVO> ptnMyList = (List<PartnerVO>)session.getAttribute("ptnMyList");
		model.addAttribute("ptnMyList", ptnMyList);

		return "chat/createChat";
	}
	
	
	// 채팅방 내용 
	@RequestMapping(value="/detail")
	public String detailChat(HttpServletRequest req, Model model){
		int chat_no = Integer.parseInt(req.getParameter("chat_no"));
		
		String nick = req.getParameter("mem_nick");
		model.addAttribute("nick", nick);
		
		String mem_id = req.getParameter("mem_id0");
		model.addAttribute("mem_id", mem_id);
		
		ChatVO chatVo = chatService.getChatDetail(chat_no);
		model.addAttribute("chatVo", chatVo);
		
		// 요섭오빠 추가부분************************************************
		List<ChatConFileVO> chatConFileList = new ArrayList<ChatConFileVO>();
		
		List<ChatConVO> chatConList = chatConService.getChatConList(chat_no);
		
		for (ChatConVO ccVo : chatConList) {
			ChatConFileVO ccfVo = new ChatConFileVO();
			ccfVo.setChatConVo(ccVo);
			ccfVo.setTime(ccVo.getChat_con_time());
			chatConFileList.add(ccfVo);
		}
		
		List<ChatFileVO> chatFileList = chatFileService.getChatFileList(chat_no);
		
		for (ChatFileVO cfVo : chatFileList) {
			ChatConFileVO ccfVo = new ChatConFileVO();
			ccfVo.setChatFileVo(cfVo);
			ccfVo.setTime(cfVo.getChat_file_time());
			chatConFileList.add(ccfVo);
		}
		
		Collections.sort(chatConFileList);
		
		model.addAttribute("chatConFileList", chatConFileList);
		
		//************************************************
		
		List<ChatUserVO> getChatUserList = chatUserService.getChatUserList(chat_no);
		model.addAttribute("chatUserList", getChatUserList);
		
		return "chat/chatRoom";
	}

	
	// 채팅방 생성
	@RequestMapping(value="/insert")
	public String insertChat(Model model,
			HttpServletRequest request,
			ChatVO chatVo,
			@RequestParam("ptn_id") String ptn_id) throws UnknownHostException{
		
		String result = null;
		
		String ip = InetAddress.getLocalHost().getHostAddress();
		int port = request.getServerPort();
		int seq = chatService.getChatSeq();
		
		chatVo.setChat_ip(ip);
		chatVo.setChat_port(port);
		chatVo.setChat_no(seq);
		
		int resultNum = chatService.insertChat(chatVo);
		
		MemberVO memberVo = memService.getMemDetail(chatVo.getMem_id());
		
		if (resultNum > 0) {
			model.addAttribute("chatVo", chatVo);
			model.addAttribute("memberVo", memberVo);
			
			// 해당 채팅방에 회원 추가
			ChatUserVO cuv = new ChatUserVO();
			cuv.setChat_no(seq);
			cuv.setMem_id(memberVo.getMem_id());
			
			int cuvResult = chatUserService.insertChatUser(cuv);
			
			if((cuvResult>0) && (ptn_id != "")){
				// 파트너 추가
				ChatUserVO cuv2 = new ChatUserVO();
				cuv2.setChat_no(seq);
				cuv2.setMem_id(ptn_id);
				
				int cuvPtnResult = chatUserService.insertChatUser(cuv2);
				
				List<ChatUserVO> getChatUserList = chatUserService.getChatUserList(seq);
				model.addAttribute("chatUserList", getChatUserList);
				
				if(cuvPtnResult>0){
					result = "chat/chat";
				}else{
					result = "main";
				}
			}else if((cuvResult>0) && (ptn_id == "")){
				List<ChatUserVO> getChatUserList = chatUserService.getChatUserList(seq);
				model.addAttribute("chatUserList", getChatUserList);
				
				result = "chat/chat";
			}else{
				result = "chat/chat";
			}
		} else {
			result = "main";
		}
		return result;
	}
	
	// 채팅 내용 저장 
	@ResponseBody
	@RequestMapping(value="/insertChatCon")
	public ChatConVO insertChatContent(@RequestParam("msg") String chat_cont,
			@RequestParam("chat_no") int chat_no,
			@RequestParam("mem_id") String mem_id,
			@RequestParam("nick") String nick,
			Model model){
		
		int seq = chatConService.getChatConSeq();
		
		ChatConVO chatConVo = new ChatConVO();
		chatConVo.setChat_con_no(seq);
		chatConVo.setChat_cont(chat_cont);
		chatConVo.setChat_no(chat_no);
		chatConVo.setMem_id(mem_id);
		chatConVo.setMem_nick(nick);
		
		int result = chatConService.insertChatCon(chatConVo);
		
		ChatConVO ccv = null;
		
		if(result>0){
			ccv = chatConService.getChatCon(seq);
		}
		
		return ccv;
	}
	
	//채팅방 비활성화
	@ResponseBody
	@RequestMapping(value="/deleteChat")
	public int deleteChat(ChatUserVO chatUserVo, Model model){
		int cnt2 = 0;
		int cnt = chatUserService.deleteChatUserR(chatUserVo);
		if(cnt > 0){
			System.out.println("채팅방 인원 삭제 성공");
			List<ChatUserVO> chatUserList = chatUserService.getChatUserList(chatUserVo.getChat_no());
			cnt2 = chatUserList.size();
			if(cnt2 < 2){
				int cnt3 = chatService.deleteChat(chatUserVo.getChat_no());
				if(cnt3 > 0){
					System.out.println("채팅방 삭제 성공");
				}else{
					System.out.println("채팅방 삭제 실패");
				}
			}
			
		}else{
			System.out.println("채팅방 인원 삭제 실패");
		}
		
		return cnt2;
	}
	
	//채팅방 리셋
	@ResponseBody
	@RequestMapping(value="/search")
	public Object getBookInfo(@RequestParam Map<String,Object> map,
			@RequestParam("mem_id") String mem_id){
		// 회원이 포함된 채팅방 리스트 반환
		Map<String, Object> retVal = new HashMap<String, Object>();
		
		List<ChatVO> getChatList = chatService.getChatList(mem_id);
		retVal.put("getChatList", getChatList);
		
		return retVal;
	}
	
	
	@RequestMapping(value="/insertChatFile")
	public ModelAndView insertChatFile(MultipartHttpServletRequest request) throws IllegalStateException, IOException{
		ModelAndView model = new ModelAndView();
		model.setView(jsonView);
		
		int chat_no = Integer.parseInt(request.getParameter("chat_no"));
		String mem_id = request.getParameter("mem_id");

		int chat_file_no = chatFileService.getChatFileSeq();

		File dir = new File(PATH);
		if (!dir.isDirectory()) {
			dir.mkdirs();
		}

		Iterator<String> itr = request.getFileNames();

		ChatFileVO chatFileVo = new ChatFileVO();

		String origName = "";

		if (itr.hasNext()) {
			List<MultipartFile> mpf = request.getFiles(itr.next());

			// 임시 파일을 복사한다.
			for (MultipartFile file : mpf) {
				origName = new String(file.getOriginalFilename().getBytes(
						"8859_1"), "UTF-8");

				String file_upload = UUID.randomUUID().toString();

				File serverFile = new File(PATH + File.separator + origName);
				file.transferTo(serverFile);

				chatFileVo.setChat_file_name(origName);
				chatFileVo.setChat_file_path(PATH);
				chatFileVo.setChat_file_upload(file_upload);
				chatFileVo.setChat_no(chat_no);
				chatFileVo.setChat_file_no(chat_file_no);
				chatFileVo.setMem_id(mem_id);

				int cnt = chatFileService.insertChatFile(chatFileVo);

				if (cnt > 0) {
					System.out.println("채팅 파일 성공");
				} else {
					System.out.println("채팅 파일 실패");
				}
			}
			ChatFileVO chatFilevo = chatFileService.getChatFileDetail(chat_file_no);
			// 업로드된 파일이 있을경우 응답.
			
			model.addObject("chat_file_no", chat_file_no);
			model.addObject("file_name", origName);
			model.addObject("result", "success");
			model.addObject("time", chatFilevo.getTime());
			model.addObject("mem_id", chatFilevo.getMem_id());
			
			return model;
		} else {
			// 업로드된 파일이 없을 경우 응답.
			model.addObject("result", "fail");
			return model;
		}
	}
	
	
	// 임시 프로필 사진 출력 ==> 임시로 기본 프로필만 나오게 해놓음!! 차후 수정
		@RequestMapping("/img")
		public void img(@RequestParam(value="chat_file_no") int chat_file_no, HttpServletResponse response, HttpServletRequest request) throws IOException {
//			int chat_file_no = chatFileService.getChatFileSeq();
			
			ChatFileVO chatFileVo = chatFileService.getChatFileDetail(chat_file_no);
			// 접속한 회원
//			MemberVO memVo = memService.getMemDetail(mem_id);

			// String file = stdVo.getPicpath()+ File.separator +
			// stdVo.getPicname();
			String file = PATH + File.separator + chatFileVo.getChat_file_name();

			response.setHeader("Content-Disposition",
					"attachment; filename=\""+chatFileVo.getChat_file_name()+"\"");
			response.setContentType("application/octet-stream");

			// file 입출력을 위한 준비
			ServletOutputStream sos = response.getOutputStream();

			File f = new File(file);
			FileInputStream fis = new FileInputStream(f);
			byte[] b = new byte[512];
			int len;

			while ((len = fis.read(b)) != -1) {
				sos.write(b, 0, len);
			}

			sos.close();
			fis.close();
		}
		
		
		
		@RequestMapping("/fileDownload")
		public void file(HttpServletRequest request, HttpServletResponse response) throws IOException{
			//FileUtil.fileUploadPath : brown.png
			//파라미터로 파일명 제공
			// localhost:8180/fileDownload?fileName=brown.png
			String fileName = request.getParameter("file_name");
			response.setHeader("Content-Disposition", "attachment; filename=\""+fileName+"\""); 
			response.setContentType("application/octet-stream");
			
			
			//D:\\A_TeachingMaterial\\7.JspSpring\\fileUpload\\brown.png
			String file = PATH + File.separator + fileName;
			
			//file 입출력을 위한 준비
			ServletOutputStream sos = response.getOutputStream();
			
			File f = new File(file);
			FileInputStream fis = new FileInputStream(f);
			byte[] b = new byte[512];
			int len = 0;
			while((len = fis.read(b)) != -1){
				sos.write(b, 0, len);
			}
			
			sos.close();
			fis.close();
		}
		
	//채팅방명 수정하는 부분
	@ResponseBody
	@RequestMapping("/chatModify")
	public ChatVO chatModify(@RequestParam("chatRoom_name") String chat_title,
			@RequestParam("chat_no") int chat_no,
			@RequestParam("mem_id") String mem_id,
			@RequestParam("nick") String nick,
			@RequestParam("chat_ip") String chat_ip){
		
		ChatVO cv = new ChatVO();
		cv.setChat_title(chat_title);
		cv.setChat_no(chat_no);
		
		chatService.updateChat(cv);
		
		return cv;
	}
	
	@RequestMapping(value = "/insertMulti")
	public String insertChatMulti(Model model, HttpServletRequest request,
			@RequestParam("ptn") List<String> listId,
			@RequestParam("mem_id") String mem_id) throws UnknownHostException {

		String chat_title = "";

		for (String in_mem_id : listId) {
			MemberVO memVo = memService.getMemDetail(in_mem_id);
			chat_title += memVo.getMem_nick() + ", ";
		}
		chat_title = chat_title.substring(0, chat_title.lastIndexOf(", "));

		ChatVO chatVo = new ChatVO();

		int seq = chatService.getChatSeq();

		String result = "";

		String ip = InetAddress.getLocalHost().getHostAddress();
		int port = request.getServerPort();

		chatVo.setChat_title(chat_title);
		chatVo.setMem_id(mem_id);
		chatVo.setChat_ip(ip);
		chatVo.setChat_port(port);
		chatVo.setChat_no(seq);

		int resultNum = chatService.insertChat(chatVo);

		MemberVO memberVo = memService.getMemDetail(mem_id);

		if (resultNum > 0) {
			model.addAttribute("chatVo", chatVo);
			model.addAttribute("memberVo", memberVo);

			// 해당 채팅방에 회원 추가
			ChatUserVO cuv = new ChatUserVO();
			cuv.setChat_no(seq);
			cuv.setMem_id(mem_id);

			int cuvResult = chatUserService.insertChatUser(cuv);

			if (cuvResult > 0) {

				String id = "";

				// 파트너 추가
				ChatUserVO cuv2 = new ChatUserVO();

				int cuvPtnResult = 0;

				for (int i = 0; i < listId.size(); i++) {
					id = (String) listId.get(i);
					cuv2.setChat_no(seq);
					cuv2.setMem_id(id);

					cuvPtnResult = chatUserService.insertChatUser(cuv2);
				}

				if (cuvPtnResult > 0) {
					List<ChatUserVO> chatUserList = chatUserService.getChatUserList(seq);
					model.addAttribute("chatUserList", chatUserList);
					
					result = "chat/chat";
				} else {
					result = "main";
				}
			} else {
				result = "chat/chat";
			}
		} else {
			result = "main";
		}

		return result;
	}
	
	
	// 채팅 리스트 동료,프로젝트 아이콘 클릭시 팝업 정보
	@RequestMapping("/pop")
	@ResponseBody
	public MemberVO memChk(@RequestParam("mem_id") String mem_id){
		
		MemberVO memVo = memService.getMemDetail(mem_id);
		
		return memVo;
	}
	
	// 채팅 리스트 동료,프로젝트 아이콘 클릭시 팝업 정보
	@RequestMapping("/pop2")
	@ResponseBody
	public Object memChk2(
			@RequestParam("mem_id") String mem_id,
			@RequestParam("my_id") String my_id){
		// 회원이 포함된 채팅방 리스트 반환
		Map<String, Object> retVal = new HashMap<String, Object>();
				
		MemberVO memVo = memService.getMemDetail(mem_id);
		retVal.put("memVo", memVo);
		
		String pop_my_id = my_id;
		retVal.put("my_id", pop_my_id);
		
		return retVal;
	}
	
	//채팅 인원 수 체크
//	@ResponseBody
//	@RequestMapping(value="/chatUserChk")
//	public int chatUserChk(ChatUserVO chatUserVo, Model model){
//		List<ChatUserVO> chatUserList = chatUserService.getChatUserList(chatUserVo.getChat_no());
//		int cnt = chatUserList.size();
//		if(cnt < 2){
//			System.out.println("채팅방 인원 삭제 성공");
//			cnt2 = chatUserService.getChatUserCnt(chatUserVo.getChat_no());
//			if(cnt2 < 2){
//				int cnt3 = chatService.deleteChat(chatUserVo.getChat_no());
//				if(cnt3 > 0){
//					System.out.println("채팅방 삭제 성공");
//				}else{
//					System.out.println("채팅방 삭제 실패");
//				}
//			}
//			
//		}else{
//			System.out.println("채팅방 인원 삭제 실패");
//		}
//		
//		return cnt2;
//	}
	
//	
//
//	// 채팅에서 기존 방으로 초대하기
//	@RequestMapping(value="/inviteChat")
//	public String inviteChat(Model model, HttpSession session, @RequestParam("chat_no") int chat_no) throws UnknownHostException{
//		MemberVO memVo = (MemberVO)session.getAttribute("memVo");
//		model.addAttribute("memVo", memVo);
//		
//		model.addAttribute("ip", InetAddress.getLocalHost().getHostAddress());
//		
//		List<PartnerVO> ptnMyList = (List<PartnerVO>)session.getAttribute("ptnMyList");
//		model.addAttribute("ptnMyList", ptnMyList);
//		
//		model.addAttribute("chat_no", chat_no);
//		
//		return "chat/inviteChat";
//	}
//	
//	
//	// 채팅방 초대
//	@RequestMapping(value = "/invitetMulti")
//	public String iviteChatMulti(Model model, HttpServletRequest request,
//			@RequestParam("ptn") List<String> listId,
//			@RequestParam("mem_id") String mem_id,
//			@RequestParam("mem_nick") String mem_nick,
//			@RequestParam("ip") String ip,
//			@RequestParam("chat_no") int chat_no) throws UnknownHostException {
//
//		// 이미 있는 방에 추가
//		String id = "";
//		
//		for (int i = 0; i < listId.size(); i++) {
//			ChatUserVO cv = new ChatUserVO();
//			id = (String)listId.get(i);
//			cv.setChat_no(chat_no);
//			cv.setMem_id(id);
//			
//			System.out.println("cv.setChat_no(chat_no):::::::" +cv.getChat_no());
//			System.out.println("cv.setMem_id(id):::::::" + cv.getMem_id());
//			
//			chatUserService.insertChatUser(cv);
//		}
//		
//		// 채팅 리스트 
//		List<ChatUserVO> getChatUserList = chatUserService.getChatUserList(chat_no);
//		model.addAttribute("chatUserList", getChatUserList);
//		
//		return "redirect:/chat/detail?chat_no="+chat_no+"&mem_id0="+mem_id+"&mem_nick="+mem_nick+"chat_ip="+ip;
//	}
}
